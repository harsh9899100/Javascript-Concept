
-> The Document Object Model (DOM) is a programming interface that represents an HTML or XML document as a tree structure,
   allowing you to manipulate and interact with the document's elements, attributes, and content.
   - where each node is an object representing a part of the document. 
   - JavaScript can interact with and manipulate the DOM to dynamically update a webpage.

Here's a comprehensive guide to all DOM concepts in JavaScript:

1. DOM Tree Structure :
￣￣￣￣￣￣￣￣￣￣￣￣
- Document: The root of the DOM tree.
- Nodes: Building blocks of the DOM, classified as:
- Element nodes: Represent HTML tags (e.g., <div>, <p>).
- Text nodes: Represent the text inside an element.
- Attribute nodes: Represent attributes of an element (e.g., id, class).
- Comment nodes: Represent comments in the document (<!-- -->).

2. Accessing the DOM :
￣￣￣￣￣￣￣￣￣￣￣￣
a. Using document object:
-------------------------
  - Selectors:
      document.getElementById("id")
      document.getElementsByClassName("class")
      document.getElementsByTagName("tag")
      document.querySelector("selector")
      document.querySelectorAll("selector")

b. Traversing nodes:
--------------------
  - Parent node: parentNode, parentElement
  - Child nodes:
      childNodes (all nodes, including text and comment nodes)
      children (only element nodes)
      firstChild, lastChild, firstElementChild, lastElementChild
  - Siblings: nextSibling, previousSibling, nextElementSibling, previousElementSibling

3. Manipulating the DOM :
￣￣￣￣￣￣￣￣￣￣￣￣￣
  a. Changing Content
  -------------------
    - element.innerHTML: Set or get the HTML content of an element.
    - element.textContent: Set or get the text content of an element.

  b. Changing Attributes
  ----------------------
    - element.setAttribute("name", "value")
    - element.getAttribute("name")
    - element.removeAttribute("name")
    - Direct property manipulation: element.id = "newId"

  c. Changing Styles
  ------------------
    - Inline styles: element.style.property = "value"
    - Adding/removing classes:
        element.classList.add("className")
        element.classList.remove("className")
        element.classList.toggle("className")
        element.classList.contains("className")

  d. Adding/Removing Elements
  ---------------------------
    - Create elements: 
        document.createElement("tag")
    - Append elements:
        parent.appendChild(child)
        parent.append(newNode)
    - Insert elements:
        parent.insertBefore(newNode, referenceNode)
        parent.insertAdjacentHTML(position, text)
    - Remove elements:
        parent.removeChild(child)
        element.remove()

4. Events and Event Handling :
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
  a. Adding Events
  ----------------
    - Inline: <button onclick="function()">Click me</button>
    - Event properties: element.onclick = function
    - Event listeners:
        element.addEventListener("event", function)
        element.removeEventListener("event", function)

  b. Event Object
  ---------------
    - event.target: The element that triggered the event.
    - event.currentTarget: The element the listener is attached to.
    - Event types: click, submit, keydown, mousemove, etc.
    - Default behavior: event.preventDefault()
    - Propagation:
        event.stopPropagation()
        event.stopImmediatePropagation()

5. DOM Navigation :
￣￣￣￣￣￣￣￣￣￣
  - document.documentElement: The root element (<html>).
  - document.body: The <body> element.
  - document.head: The <head> element.

6. Forms and Input Elements :
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
  - Accessing form elements: document.forms["formName"]
  - Accessing inputs: form.elements["inputName"]
  - Working with inputs:
      value
      checked (for checkboxes/radio buttons)
      selectedIndex (for dropdowns)

7. Advanced DOM Concepts :
￣￣￣￣￣￣￣￣￣￣￣￣￣￣
  a. Dynamic DOM
  --------------
     - Dynamically add/remove content based on user interaction.

  b. Delegation
  -------------
     - Attach a single event listener to a parent element to manage events for its child elements.

  c. Mutation Observer
  --------------------
     - MutationObserver API allows observing changes to the DOM.

  d. Shadow DOM
  -------------
     - Encapsulation of a DOM subtree with styles and behavior, often used in Web Components.

8. Performance Tips :
￣￣￣￣￣￣￣￣￣￣￣
  - Minimize DOM manipulation by:
    - Using DocumentFragment for batch operations.
    - Cloning nodes: element.cloneNode(deep).
  - Cache frequently accessed elements.

-----------------------------------------------------------------------------------------------

Example: Putting It All Together

// Accessing the DOM
const div = document.querySelector("#myDiv");

// Changing content
div.textContent = "Hello, World!";

// Adding a new element
const newButton = document.createElement("button");
newButton.textContent = "Click Me";
div.appendChild(newButton);

// Adding an event listener
newButton.addEventListener("click", () => {
  alert("Button clicked!");
});

// Traversing to parent
console.log(newButton.parentNode.id); // "myDiv"
Useful Resources
MDN Web Docs: DOM
W3Schools: DOM