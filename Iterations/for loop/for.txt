Basics:
￣￣￣￣

-> A for loop in Node.js is used to execute a block of code repeatedly for a specific number of times.

-> It consists of three parts: initialization, condition, and increment/decrement.
- The initialization part is executed once before the loop starts, and it usually initializes a loop counter variable.   
- The condition part is checked before each iteration, and if it evaluates to true, the loop body is executed.
- The increment/decrement part is executed after each iteration, and it updates the loop counter variable.

Basic Example:


for (let i = 0; i < 5; i++) {
  console.log("Iteration:", i);
}


Output:

Iteration: 0
Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4   


Advanced Usage:
￣￣￣￣￣￣￣￣￣

- Nested for loops: You can use for loops within other for loops to create nested structures.
- Breaking out of a loop: Use the break statement to "exit a loop prematurely".⭐
- Continuing to the next iteration: Use the continue statement to "skip the current iteration and proceed to the next one".⭐
- Iterating over arrays: Use the "for...of" loop to iterate over the elements of an array.⭐
- Iterating over objects: Use the "for...in" loop to iterate over the properties of an object.⭐

Examples:

1) Nested for loops:
--------------------

for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 2; j++) {
    console.log("i:", i, "j:", j);
  }
}


2) Breaking out of a loop:
-----------------------

for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break;
  }
  console.log("i:", i);
}


3) Continuing to the next iteration:
------------------------------------

for (let i = 0; i < 5; i++) {
  if (i === 2) {
    continue;
  }
  console.log("i:", i);
}


4) Iterating over arrays:
--------------------------

const numbers = [1, 2, 3, 4, 5];

for (let number of numbers) {
  console.log(number);
}


5) Iterating over objects:
--------------------------

const person = {
  name: "Alice",
  age: 30,
  city: "New York"
};

for (let property in person) {
  console.log(property, ":", person[property]);
}


By understanding these concepts and examples, you can effectively use for loops to perform various tasks in your Node.js applications.